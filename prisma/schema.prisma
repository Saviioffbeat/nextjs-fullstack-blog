// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "sqlite"
//   // url      = env("DATABASE_URL")
//   url      = "file:./dev.db"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  author        Author[]
  comment       Comment[]
  createdAt     DateTime  @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Author {
  id      String    @id @default(cuid())
  name    String
  email   String    @default("unknown")
  image   String
  bio     String
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  article Article[]
}

model Category {
  id      String    @id @default(cuid())
  name    String    @unique
  article Article[]
}

model Article {
  id         String    @id @default(cuid())
  author     Author    @relation(fields: [authorId], references: [id])
  authorId   String
  title      String
  body       String
  image      String
  summary    String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  slug       String    @unique @default("Uknown")
  views      Int       @default(0)
  createdAt  DateTime  @default(now())
  comment    Comment[]
  tags       String    @default("unknown")
}

model Comment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  body      String
  createdAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
}
